<?php

/**
 * Implements hook_permission().
 */
function icon_menu_permission() {
  return array(
    'administer menu icons' => array(
      'title' => t('Administer menu icons'),
      'description' => t('Administer menu icon settings.'),
    ),
  );
}

/**
 * Helper function to return the default icon menu values.
 */
function icon_menu_defaults() {
  return array(
    'icon' => '',
    'position' => 'title_before',
    'title_wrapper' => 0,
    'title_wrapper_element' => 'span',
    'title_wrapper_class' => 'title',
    'bundle' => '',
  );
}

function icon_menu_preprocess_link(&$variables) {
  if (!empty($variables['options']) && !empty($variables['options']['icon']) && !empty($variables['options']['icon']['bundle']) && !empty($variables['options']['icon']['icon'])) {
    $settings =  $variables['options']['icon'];
    if ($icon = theme('icon', array('bundle' => $settings['bundle'], 'icon' => $settings['icon']))) {
      // Force link to render HTML.
      $variables['options']['html'] = TRUE;
      if ($settings['title_wrapper']) {
        $variables['text'] = '<' . $settings['title_wrapper_element'] . (!empty($settings['title_wrapper_class']) ? ' class="' . $settings['title_wrapper_class'] . '"' : '') . '>' . $variables['text'] . '</' . $settings['title_wrapper_element'] . '>';
      }
      switch ($variables['options']['icon']['position']) {
        case 'title_before': $variables['text'] = $icon . $variables['text']; break;
        case 'title_after': $variables['text'] .= $icon; break;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds icon configuration options to the menu edit menu form.
 *
 * @see menu_edit_item()
 * @see _icon_menu_form_alter()
 */
function icon_menu_form_menu_edit_item_alter(&$form, $form_state) {
  $item = $form['original_item']['#value'];
  _icon_menu_form_alter($form, $item, $form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds menu attribute options to the node's edit menu item form.
 *
 * @see _menu_attributes_form_alter()
 */
function icon_menu_form_node_form_alter(&$form, $form_state) {
  if (isset($form['menu']['link']) && isset($form['#node']->menu)) {
    $item = $form['#node']->menu;
    _icon_menu_form_alter($form['menu']['link'], $item, $form);
  }
}

/**
 * Add the icon configuration to a menu item edit form.
 *
 * @param $form
 *   The menu item edit form passed by reference.
 * @param $item
 *   The optional existing menu item for context.
 */
function _icon_menu_form_alter(array &$form, array $item = array(), array &$complete_form) {
  $form['options']['#tree'] = TRUE;
  $form['options']['#weight'] = 50;
  $parents = 'options[icon]';
  if (isset($complete_form['menu']['link']) && isset($complete_form['#node']->menu)) {
    $parents = 'menu[options][icon]';
  }
  $settings = array_merge(icon_menu_defaults(), !empty($item['options']['icon']) ? $item['options']['icon'] : array());
  // Add an icon selector input element.
  $form['options']['icon'] = array(
    '#type' => 'icon_selector',
    '#default_bundle' => $settings['bundle'],
    '#default_icon' => $settings['icon'],
  );
  // Additional configuration on where to place the icon in the block.
  $icon_state = array('invisible' => array(':input[name="' . $parents . '[icon]"]' => array('value' => '')));
  $form['options']['icon']['position'] = array(
    '#type' => 'select',
    '#title' => t('Position'),
    '#description' => t('Choose where to position the icon in the menu item.'),
    '#options' => array(
      'title_before' => t('Before title'),
      'title_after' => t('After title'),
    ),
    '#default_value' => $settings['position'],
    '#states' => $icon_state,
  );
  $form['options']['icon']['title_wrapper'] = array(
    '#type' => 'checkbox',
    '#title' => t('Title Wrapper'),
    '#description' => t('Choose whether to wrap the title in a element tag or not.'),
    '#default_value' => $settings['title_wrapper'],
    '#states' => $icon_state,
  );
  $wrap_state = array(
    'visible' => array(
      ':input[name="' . $parents . '[title_wrapper]"]' => array('checked' => TRUE),
    ),
    'invisible' => array(
      ':input[name="' . $parents . '[icon]"]' => array('value' => ''),
    ),
  );
  $form['options']['icon']['title_wrapper_element'] = array(
    '#type' => 'select',
    '#title' => t('Title Wrapper Element'),
    '#description' => t('The type of element to use for the title wrapper.'),
    '#default_value' => $settings['title_wrapper_element'],
    '#options' => array(
      'span' => '<span/>',
      'div' => '<div/>',
    ),
    '#states' => $wrap_state,
  );
  $form['options']['icon']['title_wrapper_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Title Wrapper Class'),
    '#description' => t('The classes to apply to the title wrapper'),
    '#default_value' => $settings['title_wrapper_class'],
    '#states' => $wrap_state,
  );
}
