<?php

/**
 * Implements hook_permission().
 */
function icon_block_permission() {
  return array(
    'administer block icons' => array(
      'title' => t('Administer block icons'),
      'description' => t('Administer block icon settings.'),
    ),
  );
}

/**
 * Helper function to return the default icon block values.
 */
function icon_block_defaults() {
  return array(
    'icon' => '',
    'position' => 'title_before',
    'bundle' => icon_bundle_defaults(),
  );
}
/*
 * Extend block's classes with any user defined classes.
 */
function icon_block_preprocess_block(&$variables) {
  $block = &$variables['block'];
  $icon = isset($block->icon) ? unserialize($block->icon) : array();
  
  $theme = $GLOBALS['theme_key'];
  if (isset($block->theme)) {
    $theme = $block->theme;
  }
  $icon = array_merge(icon_block_defaults(icon_bundle_load($theme)), isset($block->icon) ? (array) unserialize($block->icon) : array());
  $bundle = $icon['bundle'];
  if (!empty($icon['icon']) && isset($bundle['icons'][$icon['icon']])) {
    $icon = theme('icon_icon', array('icon' => $icon['icon'], 'bundle' => $bundle));
    switch ($icon['position']) {
      case 'title_before': $variables['title_prefix'][] = array('#markup' => $icon); break;
      case 'title_after': $variables['title_suffix'][] = array('#markup' => $icon); break;
      case 'title_inside_before': $block->subject = $icon . $block->subject; break;
      case 'title_inside_after': $block->subject .= $icon; break;
      case 'content_before': $variables['content'] = $icon . $variables['content']; break;
      case 'content_after': $variables['content'] .= $icon; break;
    }
  }
}

/**
 * Alter block edit form
 */
function icon_block_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (($form_id == 'block_admin_configure' || $form_id == 'block_add_block_form') && user_access('administer block icons', $user)) {
    $block = block_load($form['module']['#value'], $form['delta']['#value']);
    $theme = variable_get('theme_default', 'bartik');
    if (isset($block->theme)) {
      $theme = $block->theme;
    }
    elseif (arg(5) === 'add') {
      $theme = arg(4);
    }
    $settings = array_merge(icon_block_defaults(), isset($block->icon) ? (array) unserialize($block->icon) : array());
    // Add an icon picker form element.
    $form['settings']['icon_picker'] = array(
      '#type' => 'icon_picker',
      '#bundle' => $settings['bundle'],
      '#icon' => $settings['icon'],
    );
    // Additional configuration on where to place the icon in the block.
    $icon_state = array('invisible' => array(':input[name="icon_picker[icon]"]' => array('value' => '')));
    $form['settings']['icon_picker']['position'] = array(
      '#type' => 'select',
      '#title' => t('Block Position:'),
      '#options' => array(
        'title_before' => t('Before title'),
        'title_after' => t('After title'),
        'title_inside_before' => t('Before title (inside markup)'),
        'title_inside_after' => t('After title (inside markup)'),
        'content_before' => t('Before content'),
        'content_after' => t('After content'),
      ),
      '#default_value' => $settings['position'],
      '#states' => $icon_state,
    );
    $form['#submit'][] = 'icon_block_form_submit';
  }
}


/**
 * Save supplied class.
 */
function icon_block_form_submit($form, &$form_state) {
  if ($form_state['values']['form_id'] == 'block_admin_configure' || $form_state['values']['form_id'] == 'block_add_block_form') {
    $module = $form_state['values']['module'];
    $delta = $form_state['values']['delta'];
    // Update block icon settings.
    if (isset($form_state['values']['icon_picker'])) {
      db_merge('block')->key(array('module' => $module, 'delta' => $delta))->fields(array('icon' => serialize($form_state['values']['icon_picker'])))->execute();
    }
  }
}
