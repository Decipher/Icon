<?php
// $Id$

/**
 * Simple debug function for use during developmet.
 */
function debug($variable) {
  $message = '<pre>'. var_export($variable, TRUE) .'</pre>';
  drupal_set_message($message, 'status', FALSE);
}

/**
 * Implementation of hook_init().
 */
function icon_init() {
  // Add icon stylesheet file, if one has been generated.
  // @TODO Rewrite CSS files.
  $stylesheet = variable_get('icon_stylesheet', NULL);
  if ($stylesheet) {
    drupal_add_css(file_directory_path() .'/css/icons/'. $stylesheet);
  }
}

/**
 * Implementation of hook_perm().
 */
function icon_perm() {
  return array('administer icons');
}

/**
 * Implementation of hook_theme().
 */
function icon_theme() {
  return array(
    'icon_iconsets_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function icon_menu() {
  $items['admin/build/icons'] = array(
    'title' => 'Icons',
    'description' => 'Administer icon sets and choose which icons to use.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('icon_settings_form'),
    'access arguments' => array('administer icons'),
  );
  $items['admin/build/icons/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Icon configuration for enabled themes:
  require_once('includes/theme.inc');
  foreach (list_themes() as $key => $theme) {
    if ($theme->status) {
      $items['admin/build/icons/'. $key] = array(
        'title' => $theme->info['name'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('icon_iconsets_form', $key),
        'access arguments' => array('administer icons'),
        'type' => MENU_LOCAL_TASK,
      );
      $items['admin/build/icons/'. $key .'/iconsets'] = array(
        'title' => 'Icon sets',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
      );
      $items['admin/build/icons/'. $key .'/select'] = array(
        'title' => 'Icons',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('icon_icons_form', $key),
        'access arguments' => array('administer icons'),
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  return $items;
}

/**
 * Menu callback; display icon configuration for entire site.
 */
function icon_settings_form(&$form_state) {
  $form['todo'] = array(
    '#value' => t('Configuration settings that affect all themes.'),
  );

  return $form;
}

/**
 * Menu callback; displays a listing of all icon sets.
 *
 * @see system_themes_form()
 */
function icon_iconsets_form(&$form_state, $theme) {
  $iconsets = icon_iconset_data();

  icon_add_iconset_states($iconsets, $theme);

  uasort($iconsets, 'icon_sort_iconsets_by_info_name');

  $status = array();

  foreach ($iconsets as $iconset) {
    $screenshot = NULL;
    if (file_exists($iconsets[$iconset->name]->info['screenshot'])) {
      $screenshot = $iconsets[$iconset->name]->info['screenshot'];
    }
    $screenshot = $screenshot ? theme('image', $screenshot, t('Screenshot for %iconset icon set', array('%iconset' => $iconset->info['name'])), '', array('class' => 'screenshot'), FALSE) : t('no screenshot');

    $form[$iconset->name]['screenshot'] = array('#value' => $screenshot);

    $form[$iconset->name]['info'] = array(
      '#type' => 'value',
      '#value' => $iconset->info,
    );

    $options[$iconset->name] = '';
    if (!empty($iconset->status)) {
      $status[] = $iconset->name;
    }
  }

  $form['theme'] = array(
    '#type' => 'value',
    '#value' => $theme,
  );

  $form['status'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => $status,
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  $form['buttons']['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset to defaults'),
  );

  return $form;
}

/**
 * Process icon_overview_form form submissions.
 */
function icon_iconsets_form_submit($form, &$form_state) {
  $theme = $form_state['values']['theme'];

  // Delete all entries for this theme in {iconsets}.
  db_query("DELETE FROM {iconsets} WHERE theme = '%s'", $theme);

  // Save the states of all icon sets for this theme.
  if ($form_state['values']['op'] == t('Save configuration')) {
    if (is_array($form_state['values']['status'])) {
      foreach ($form_state['values']['status'] as $key => $choice) {
        db_query("INSERT INTO {iconsets} (iconset, theme, status) VALUES ('%s', '%s', %d)", $key, $theme, $choice ? 1 : 0);
      }
    }
  }
  else {
    // Revert to defaults.
  }

  drupal_set_message(t('The configuration options have been saved.'));
}

/**
 * Menu callback; displays a listing of all icons available to a theme.
 */
function icon_icons_form(&$form_state, $theme) {
  $form['todo'] = array(
    '#value' => t('UI for selecting icons for the %theme theme.', array('%theme' => $theme)),
  );

  return $form;
}

/**
 * Collect data about all currently available icon sets.
 *
 * @return
 *   Array of all available icon sets and their data.
 * @see system_theme_data()
 */
function icon_iconset_data() {
  $iconsets = _icon_iconset_data();
  system_get_files_database($iconsets, 'iconset');

  db_query("DELETE FROM {system} WHERE type = 'iconset'");

  foreach ($iconsets as $iconset) {
    // Redefine the status as a global status for the icon set.
    $iconset->global_status = $iconset->status;
    $iconset->status = 0;

    if (!isset($iconset->owner)) {
      $iconset->owner = '';
    }

    db_query("INSERT INTO {system} (name, owner, info, type, filename, status, throttle, bootstrap) VALUES ('%s', '%s', '%s', '%s', '%s', %d, %d, %d)", $iconset->name, $iconset->owner, serialize($iconset->info), 'iconset', $iconset->filename, $iconset->global_status, 0, 0);
  }

  return $iconsets;
}

/**
 * Helper function to scan and collect icon set .info data.
 *
 * @return
 *   An associative array of icon set information.
 * @see _system_theme_data()
 */
function _icon_iconset_data() {
  static $iconsets_info = array();

  if (empty($iconsets_info)) {
    $iconsets = icon_find_iconsets();

    $defaults = icon_iconset_default();

    foreach ($iconsets as $iconset) {
      $iconset->info = drupal_parse_info_file($iconset->filename) + $defaults;

      // @TODO Is this needed for icon sets?
      //drupal_alter('system_info', $iconset->info, $iconset);

      if (!empty($iconset->info['screenshot'])) {
        $iconset->info['screenshot'] = dirname($iconset->filename) .'/'. $iconset->info['screenshot'];
      }
    }

    $iconsets_info = $iconsets;
  }

  return $iconsets_info;
}

/**
 * Find all available icon sets.
 *
 * @return
 *   An array of all available icon sets.
 */
function icon_find_iconsets() {
  // Get a list of available generic icon sets.
  $iconsets = drupal_system_listing('\.info$', 'icons', 'name', 0);

  // Add any icon sets from enabled system components.
  $result = db_query("SELECT filename, name, type FROM {system} WHERE type <> '%s' AND status = 1", 'iconset');
  while ($component = db_fetch_object($result)) {
    $iconset = file_scan_directory(dirname($component->filename) .'/icons', '\.info$', array('.', '..', 'CVS'), 0, FALSE, 'name');
    $iconsets = array_merge($iconsets, $iconset);
  }

  return $iconsets;
}

/**
 * Get statuses of icon sets in a particular theme.
 *
 * @param $iconsets
 *   The array of icon sets to add statuses to.
 * @param $theme
 *   The name of the theme for which statuses apply.
 */
function icon_add_iconset_states(&$iconsets, $theme) {
  $result = db_query("SELECT iconset, status FROM {iconsets} WHERE theme = '%s'", $theme);
  while ($item = db_fetch_object($result)) {
    $iconsets[$item->iconset]->default_status = $iconsets[$item->iconset]->status;
    $iconsets[$item->iconset]->status = $item->status;
  }
}

/**
 * Array sorting callback; sorts icon sets by their name.
 */
function icon_sort_iconsets_by_info_name($a, $b) {
  return strcasecmp($a->info['name'], $b->info['name']);
}

/**
 * Prepare defaults for icon sets.
 *
 * @return
 *   An array of default icon set settings.
 * @see system_theme_default()
 */
function icon_iconset_default() {
  return array(
    'description' => '',
    'screenshot' => 'screenshot.png',
  );
}

/**
 * Theme function for the icon sets overview form.
 *
 * @param $form
 *   An associative array containing the structure of the form.
 * @see theme_system_themes_form()
 */
function theme_icon_iconsets_form($form) {
  foreach (element_children($form) as $key) {
    if (!isset($form[$key]['info'])) {
      continue;
    }

    $info = $form[$key]['info']['#value'];

    $description = t($info['description']);

    $status = drupal_render($form['status'][$key]);

    $iconset = '<div class="iconset-info"><h2>'. $info['name'] .'</h2><div class="description">'. $description .'</div></div>';

    $row = array();
    $row[] = drupal_render($form[$key]['screenshot']);
    $row[] = $iconset;
    $row[] = array('data' => $status, 'align' => 'center');
    $rows[] = $row;
  }

  $header = array(t('Screenshot'), t('Name'), t('Enabled'));
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}
