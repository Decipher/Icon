<?php

/**
 * @file icon.module
 * Implements an API for icon providers and administrative UI for integrating icons through out the site.
 */

// Provide <PHP 5.3 support for the __DIR__ constant.
if (!defined('__DIR__')) {
  define('__DIR__', dirname(__FILE__));
}
// Include necessary files. Normally these would all be in the main .module
// file, however it's easier to manage in separate files.
$includes = array('bundles', 'cache', 'element', 'render', 'theme', 'utilities');
foreach ($includes as $include) {
  require_once __DIR__ . '/includes/' . $include . '.inc';
}

/**
 * Implements hook_library().
 */
function icon_library() {
  $libaries_path = drupal_get_path('module', 'icon') . '/libraries';
  $libraries['icon_selector'] = array(
    'title' => 'Icon Selector',
    'website' => 'http://drupal.org/project/icon',
    'version' => '1.0.0',
    'css' => array(
      $libaries_path . '/icon_selector/css/icon_selector.css' => array()
    ),
    'js' => array(
      $libaries_path . '/icon_selector/js/icon_selector.js' => array(),
      array(
      'type' => 'setting',
      'data' => array('icon_selector' => array(
        'bundles' => array_keys(icon_bundles()),
      )),
    )),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function icon_menu() {
  $module_path = drupal_get_path('module', 'icon');
  $items = array();
  $items['admin/config/user-interface/icons'] = array(
    'title' => 'Icon Bundles',
    'description' =>  'Provides an overview of all icons bundles available for the site.',
    'page callback' => 'icon_bundle_overview',
    'access arguments' => array('administer icons'),
    'file' => 'admin.inc',
    'file path' => $module_path . '/includes',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function icon_permission() {
  return array(
    'administer icons' => array(
      'title' => t('Administer Icons'),
      'description' => t('Administer icons.'),
    ),
  );
}

/**
 * Returns information about icons render hooks.
 *
 * @param $hook
 *   (optional) The name of the render hook to return information for. If
 *   omitted, render hook information provided by all modules and themes will
 *   be returned.
 * @param $reset
 *   Boolean to force reset of the cached data. Default: FALSE.
 *
 * @return array|false
 *   An associative array containing render hook information from all modules
 *   and themes, the information for the render hook specified by $hook, or
 *   FALSE if the render hook $name is not registered.
 *
 * @see hook_icon_render_hooks()
 */
function &icon_render_hooks($hook = NULL, $reset = FALSE) {
  $hooks = &drupal_static(__FUNCTION__);
  if (!isset($hooks) || $reset) {
    if (!$reset && ($cache = cache_get('icon_render_hooks')) && !empty($cache->data)) {
      $hooks = $cache->data;
    }
    else {
      $hooks = array();
      // Gather information from modules and themes that implement
      // hook_icon_render_hooks().
      foreach (icon_extension_implements('icon_render_hooks') as $extension => $type) {
        $extension_hooks = (array) icon_extension_invoke($type, $extension, 'icon_render_hooks');
        foreach ($extension_hooks as $render_hook => $data) {
          if (!is_string($render_hook) && is_string($data)) {
            $render_hook = $data;
            $data = array();
          }
          $data['name'] = $render_hook;
          $data['type'] = $type;
          $data[$type] = $extension;
          if (!isset($data['file'])) {
            $data['file'] = 'module' === $type ? $extension . '.module' : 'template.php';
          }
          if (!isset($data['path'])) {
            $data['path'] = drupal_get_path($type, $extension);
          }
          $hooks[$render_hook] = $data;
        }
      }
      // Allow modules or themes to alter render hook information.
      drupal_alter('icon_render_hooks', $hooks);
      // Cache the render hook information.
      cache_set('icon_render_hooks', $hooks);
    }
  }
  if (isset($hook)) {
    if (!empty($hooks[$hook])) {
      return $hooks[$hook];
    }
    else {
      $false = FALSE;
      return $false;
    }
  }
  return $hooks;
}

/**
 * Default properties for a bundle definition.
 *
 * @param: $bundle
 *   An associative array of bundle information, passed by reference.
 * @param: $name
 *   The machine name of the bundle.
 */
function icon_bundle_defaults(&$bundle = array(), $name = '') {
  $bundle += array(
    'name' => $name,
    'title' => $name,
    'provider' => $name,
    'url' => '',
    'version' => '',
    'import' => FALSE,
    'icons' => array(),
    'settings' => array(),
  );
  return $bundle;
}

/**
 * Returns information about all icon bundles.
 *
 * @param $name
 *   The name of the bundle to load.
 * @param $reset
 *   Boolean to force reset of the cached data. Default: FALSE.
 *
 * @return array|false
 *   An associative array containing information for all bundles.
 *
 * @see hook_icon_info()
 */
function icon_bundles($name = NULL, $reset = FALSE) {
  $bundles = &drupal_static(__FUNCTION__);
  if (!isset($bundles) || $reset) {
    if (!$reset && ($cache = cache_get('icon_bundles')) && !empty($cache->data)) {
      $bundles = $cache->data;
    }
    else {
      $bundles = array();
      foreach (icon_extension_implements('icon_bundles') as $extension => $type) {
        $extension_bundles = (array) icon_extension_invoke($type, $extension, 'icon_bundles');
        foreach ($extension_bundles as $bundle_name => $bundle) {
          icon_bundle_defaults($bundle, $bundle_name);
          $bundles[$bundle_name] = $bundle;
        }
      }
      // Allow modules or themes to alter the bundles.
      drupal_alter('icon_bundles', $bundles);
      // Cache the info.
      cache_set('icon_bundles', $bundles);
    }
  }
  if (isset($name)) {
    if (!empty($bundles[$name])) {
      return $bundles[$name];
    }
    else {
      $false = FALSE;
      return $false;
    }
  }
  return $bundles;
}

/**
 * Load a specific bundle.
 *
 * @param $name
 *   The name of the bundle to load.
 *
 * @return
 *   An associative array of bundle information as returned from
 *   icon_bundles().
 */
function icon_bundle_load($name) {
  $loaded = &drupal_static(__FUNCTION__, array());
  if (!isset($loaded[$name])) {
    if (($cache = cache_get($name, 'cache_icon_bundles')) && !empty($cache->data)) {
      $loaded[$name] = $cache->data;
    }
    else {
      $bundle = icon_bundles($name);
      cache_set($name, $bundle, 'cache_icon_bundles');
      $loaded[$name] = $bundle;
    }
  }
  return $loaded[$name];
}
