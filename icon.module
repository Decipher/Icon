<?php

/**
 * @file icon.module
 * Implements an API for icon providers and administrative UI for integrating icons through out the site.
 */

/**
 * Implements hook_flush_caches().
 */
function icon_flush_caches() {
  return array('cache_icon_bundles');
}

/**
 * Implements hook_permission().
 */
function icon_permission() {
  return array(
    'administer icons' => array(
      'title' => t('Administer Icons'),
      'description' => t('Administer icons.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function icon_menu() {
  $items = array();
  $items['admin/config/user-interface/icons'] = array(
    'title' => 'Icon Bundles',
    'description' =>  'Provides an overview of all icons bundles available for the site.',
    'page callback' => 'icon_bundle_overview',
    'access arguments' => array('administer icons'),
    'file' => 'icon.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function icon_theme($existing, $type, $theme, $path) {
  $hooks['icon'] = array(
    'pattern' => 'icon',
    'variables' => array(
      'attributes' => array(),
      'icon' => NULL,
      'bundle' => NULL,
    ),
  );
  // Add hooks for bundle providers so they can control their icon output.
  $set = array();
  foreach (icon_bundle_info() as $name => $bundle) {
    $extension = $bundle[$bundle['extension']];
    if (!isset($set[$extension])) {
      $hooks['icon_' . $extension] = array(
        'variables' => array(
          'attributes' => array(),
          'icon' => NULL,
          'bundle' => NULL,
        ),
      );
    }
  }
  return $hooks;
}

/**
 * Default properties for a bundle definition.
 *
 * @param: $bundle
 *   An associative array of bundle information, passed by reference.
 * @param: $name
 *   The machine name of the bundle.
 */
function icon_bundle_defaults(&$bundle = array(), $name = '') {
  $bundle += array(
    'name' => $name,
    'title' => $name,
    'icons' => array(),
    'import' => FALSE,
    'settings' => array(),
  );
  return $bundle;
}

/**
 * Returns information about registered bundles.
 *
 * The returned information is unprocessed; i.e., as registered by modules.
 * Shamelessly copied from the Libraries module and altered slightly.
 *
 * @param $name
 *   (optional) The machine name of a bundle to return registered information
 *   for. If omitted, information about all registered bundles is returned.
 *
 * @return array|false
 *   An associative array containing registered information for all bundles,
 *   the registered information for the bundle specified by $name, or FALSE if
 *   the bundle $name is not registered.
 *
 * @see hook_icon_bundle_info()
 */
function &icon_bundle_info($name = NULL) {
  $bundles = &drupal_static(__FUNCTION__);
  if (!isset($bundles)) {
    $bundles = array();
    // Gather information from hook_icon_bundle_info().
    foreach (module_implements('icon_bundle_info') as $module) {
      foreach (module_invoke($module, 'icon_bundle_info') as $machine_name => $bundle) {
        $bundle['extension'] = 'module';
        $bundle['module'] = $module;
        $bundles[$machine_name] = $bundle;
      }
    }
    // Gather information from hook_icon_bundle_info() in enabled themes.
    // @see drupal_alter()
    global $theme, $base_theme_info;
    if (isset($theme)) {
      $theme_keys = array();
      foreach ($base_theme_info as $base) {
        $theme_keys[] = $base->name;
      }
      $theme_keys[] = $theme;
      foreach ($theme_keys as $theme_key) {
        $function = $theme_key . '_' . 'icon_bundle_info';
        if (function_exists($function)) {
          foreach ($function() as $machine_name => $bundle) {
            $bundle['extension'] = 'theme';
            $bundle['theme'] = $theme_key;
            $bundles[$machine_name] = $bundle;
          }
        }
      }
    }
    // Provide defaults.
    foreach ($bundles as $machine_name => &$bundle) {
      icon_bundle_defaults($bundle, $machine_name);
    }
    // Allow modules to alter the registered bundles.
    drupal_alter('icon_bundle_info', $bundles);
  }
  if (isset($name)) {
    if (!empty($bundles[$name])) {
      return $bundles[$name];
    }
    else {
      $false = FALSE;
      return $false;
    }
  }
  return $bundles;
}

/**
 * Loads a bundle.
 *
 * @param $name
 *   The name of the bundle to load.
 *
 * @return
 *   An associative array of bundle information as returned from
 *   icon_bundle_info().
 */
function icon_bundle_load($name) {
  $loaded = &drupal_static(__FUNCTION__, array());
  if (!isset($loaded[$name])) {
    $bundle = cache_get($name, 'cache_icon_bundles');
    if ($bundle) {
      $bundle = $bundle->data;
    }
    else {
      $bundle = icon_bundle_info($name);
      cache_set($name, $bundle, 'cache_icon_bundles');
    }
    $loaded[$name] = $bundle;
  }
  return $loaded[$name];
}

/**
 * Implements hook_library().
 */
function icon_library() {
  $module_path = drupal_get_path('module', 'icon');
  $libraries['icon_picker'] = array(
    'title' => 'Icon Picker',
    'website' => 'http://drupal.org/project/icon',
    'version' => '1.0.1',
    'css' => array(
      $module_path . '/css/icon.picker.css' => array()
    ),
    'js' => array(
      $module_path . '/js/icon.picker.js' => array(),
      array(
      'type' => 'setting',
      'data' => array('IconPicker' => array(
        'bundles' => array_keys(icon_bundle_info()),
      )),
    )),
  );
  return $libraries;
}

/**
 * Implements hook_element_info().
 */
function icon_element_info() {
  $types['icon_picker'] = array(
    '#input' => TRUE,
    '#tree' => TRUE,
    '#title' => t('Icon'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#default_bundle' => '',
    '#default_icon' => '',
    '#process' => array('form_process_fieldset', 'form_process_icon_picker'),
    '#pre_render' => array('form_pre_render_fieldset'),
    '#theme_wrappers' => array('fieldset'),
    '#attached' => array('library' => array(array('icon', 'icon_picker'))),
  );
  return $types;
}

/**
 * Processes an icon select list form element.
 */
function form_process_icon_picker($element) {
  // Get default values.
  $default_bundle = isset($element['#default_bundle']) ? $element['#default_bundle'] : icon_bundle_defaults();
  if (!is_array($default_bundle)) {
    $default_bundle = icon_bundle_load($default_bundle);
  }
  $default_icon = isset($element['#default_icon']) ? $element['#default_icon'] : '';
  $default_value = '';
  if ($default_bundle && !empty($default_bundle['name']) && !empty($default_icon)) {
    $default_value = $default_bundle['name'] . '|' . $default_icon;
  }
  // Build the options array for available icons per bundle.
  $options = array();
  foreach (icon_bundle_info() as $bundle_name => $bundle) {
    foreach ($bundle['icons'] as $icon_name => $icon) {
      $icon_name = is_string($icon_name) ? $icon_name : $icon;
      if (is_array($icon_name) && isset($icon_name['name'])) {
        $icon_name = $icon_name['name'];
      }
      $icon_title = is_string($icon_name) ? $icon_name : $icon;
      if (is_array($icon_title) && isset($icon_title['title'])) {
        $icon_title = $icon_title['title'];
      }
      $options[$bundle['title']][$bundle['name'] . '|' . $icon_name] = $icon_title;
    }
  }
  $element['icon'] = array(
    '#title' => t('Choose Icon:'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $default_value,
    '#empty_option' => '- No Icon -',
    '#weight' => -10,
  );
  if (isset($element['#default_value'])) {
    $element['icon']['#default_value'] = $element['#default_value'];
  }
  return $element;
}

/**
 * Implements form_type_ELEMENT_value().
 * Value callback for the 'icon_picker' element.
 */
function form_type_icon_picker_value(&$element, $input = FALSE, &$form_state = array()) {
  if ($input !== FALSE && isset($input['icon']) && strpos($input['icon'], '|') !== FALSE) {
    list($bundle, $icon) = explode('|', $input['icon']);
    $parents = $element['#parents'];
    drupal_array_set_nested_value($form_state['values'], array_merge($element['#parents'], array('bundle')), $bundle, TRUE);
    drupal_array_set_nested_value($form_state['values'], array_merge($element['#parents'], array('icon')), $icon, TRUE);
  }
}

/**
 * Implements hook_preprocess_icon().
 */
function template_preprocess_icon(&$variables) {
  $bundle = &$variables['bundle'];
  $icon = &$variables['icon'];
  if (empty($bundle) || empty($icon)) {
    return;
  }
  if (is_string($bundle)) {
    $bundle = icon_bundle_load($bundle);
  }
  // Check to see if icon is part of the bundle.
  if (!$bundle || !(isset($bundle['icons'][$icon]) || in_array($icon, $bundle['icons']))) {
    $bundle = FALSE;
    $icon = FALSE;
    return;
  }
  // Add default icon class.
  $attributes = &$variables['attributes'];
  if (!isset($attributes['class'])) {
    $attributes['class'] = array();
  }
  $attributes['class'][] = 'icon';
}

/**
 * Theming responsibility is passed to the bundle provider.
 */
function theme_icon($variables) {
  $bundle = $variables['bundle'];
  $icon = $variables['icon'];
  if (!empty($bundle) && !empty($icon)) {
    return theme('icon_' . $bundle[$bundle['extension']], $variables);
  }
}
