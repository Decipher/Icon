<?php
// $Id$

/**
 * Implementation of hook_init().
 */
function icon_init() {
  init_theme(); // TODO: Do this better.
  global $icons, $theme;

  // Retrieve icons for current theme from the cache (or rebuild).
  $icons = icon_get_icons($theme);

  // Add icon stylesheet file, if one has been generated.
  // TODO: Actually rewrite CSS files.
  $stylesheet = variable_get('icon_stylesheet', NULL);
  if ($stylesheet) {
    drupal_add_css(file_directory_path() .'/css/icons/'. $stylesheet);
  }
}

/**
 * Implementation of hook_theme().
 */
function icon_theme() {
  return array(
    'icon' => array(
      'arguments' => array('name' => NULL, 'size' => NULL),
    ),
    'icon_iconsets_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'icon_icons_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function icon_perm() {
  return array('administer icons');
}

/**
 * Implementation of hook_menu().
 */
function icon_menu() {
  // Global settings:
  $items['admin/build/icons'] = array(
    'title' => 'Icons',
    'description' => 'Administer icon sets and choose which icons to use.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('icon_settings_form'),
    'access arguments' => array('administer icons'),
  );
  $items['admin/build/icons/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Icon configuration for enabled themes:
  require_once('includes/theme.inc');
  foreach (list_themes() as $key => $theme) {
    if ($theme->status) {
      $items['admin/build/icons/'. $key] = array(
        'title' => $theme->info['name'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('icon_iconsets_form', $key),
        'access arguments' => array('administer icons'),
        'type' => MENU_LOCAL_TASK,
      );
      $items['admin/build/icons/'. $key .'/iconsets'] = array(
        'title' => 'Icon sets',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
      );
      $items['admin/build/icons/'. $key .'/select'] = array(
        'title' => 'Icons',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('icon_icons_form', $key),
        'access arguments' => array('administer icons'),
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  return $items;
}

/**
 * Menu callback; displays configuration options for all themes.
 */
function icon_settings_form(&$form_state) {
  $form['todo'] = array(
    '#value' => t('Configuration options that affect all themes.'),
  );
  return $form;
}

/**
 * Menu callback; displays a listing of all icon sets.
 */
function icon_iconsets_form(&$form_state, $theme) {
  // Get all icon sets available to this theme.
  $iconsets = icon_get_iconsets($theme);

  // Check for status against the current theme.
  icon_get_iconsets_status($iconsets, $theme);

  // Sort icon sets by their name.
  uasort($iconsets, '_icon_sort_iconsets_by_name');

  $status = array();

  // Add form elements for each icon set:
  foreach ($iconsets as $key => $iconset) {
    $screenshot = $iconsets[$key]['path'] .'/'. $iconsets[$key]['screenshot'];
    if ($iconsets[$key]['screenshot'] && file_exists($screenshot)) {
      $screenshot = theme('image', $screenshot, t('Screenshot for %iconset icon set', array('%iconset' => $iconset['name'])), '', array('class' => 'screenshot'), FALSE);
    }
    else {
      $screenshot = t('no screenshot');
    }

    $form[$key]['screenshot'] = array('#value' => $screenshot);

    $form[$key]['iconset'] = array(
      '#type' => 'value',
      '#value' => $iconset,
    );

    $options[$key] = '';
    if (!empty($iconset['status'])) {
      $status[] = $key;
    }
  }

  // Pass on the theme name to the form processing function.
  $form['theme'] = array(
    '#type' => 'value',
    '#value' => $theme,
  );

  $form['status'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => $status,
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  $form['buttons']['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset to defaults'),
  );

  return $form;
}

/**
 * Process icon_iconsets_form form submissions.
 */
function icon_iconsets_form_submit($form, &$form_state) {
  $theme = $form_state['values']['theme'];

  // Delete all icon set entries for the selected theme.
  db_query("DELETE FROM {iconsets} WHERE theme = '%s'", $theme);

  // Empty the cache for the selected theme.
  cache_clear_all('icon:'. $theme, 'cache');

  // Store the statuses of all icon sets for the selected theme.
  if ($form_state['values']['op'] == t('Save configuration')) {
    if (is_array($form_state['values']['status'])) {
      foreach ($form_state['values']['status'] as $key => $choice) {
        db_query("INSERT INTO {iconsets} (iconset, theme, status) VALUES ('%s', '%s', %d)", $key, $theme, $choice ? 1 : 0);
      }

      // Cache the icons for the selected icon sets.
      $icons = icon_get_icons($theme, TRUE);
      cache_set('icon:'. $theme, $icons);
    }
  }
  else {
    // Revert to defaults.
  }

  drupal_set_message(t('The configuration options have been saved.'));
}

/**
 * Menu callback; displays a listing of all icons available to the theme.
 */
function icon_icons_form(&$form_state, $theme) {
  // Get all icon sets available to this theme.
  $iconsets = icon_get_iconsets($theme);
  $icons = array();

  // TODO: Decide on default size for displaying icons, or let user change it.
  $size = '24x24';

  foreach (element_children($iconsets) as $iconset) {
    if ($iconsets[$iconset]['status'] && $iconsets[$iconset]['icons']) {
      $form['iconsets']['#value'][] = $iconset;

      foreach ($iconsets[$iconset]['icons'] as $icon => $filename) {
        $options[$icon][$iconset] = theme('image', $iconsets[$iconset]['path'] .'/'. $size .'/'. $filename);
      }

      $icons = array_merge($icons, array_keys($iconsets[$iconset]['icons'])); // TODO: This is a tad ugly.
    }
  }

  foreach (array_unique($icons) as $icon) {
    $default_value = 'aesthetica'; // TODO: Get the stored value.

    $form['icons'][$icon] = array(
      '#type' => 'radios',
      '#options' => $options[$icon],
      //'#default_value' => $default_value,
    );
  }

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  $form['buttons']['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset to defaults'),
  );

  return $form;
}

/**
 * Process icon_icons_form form submissions.
 */
function icon_icons_form_submit($form, &$form_state) {
  // Do stuff.
}

/**
 * Collect data about available icon sets.
 *
 * @return
 *   An array of icon sets and their icons.
 */
function icon_get_iconsets() {
  $iconsets = $infos = array();

  // Fetch information about standalone icon sets.
  $standalone_iconsets = icon_find_iconsets();
  foreach ($standalone_iconsets as $iconset) {
    $infos[$iconset->name] = $iconset->info;
    $iconsets[$iconset->name] = array(
      'name' => $iconset->info['name'],
      'description' => t($iconset->info['description']),
      'screenshot' => $iconset->info['screenshot'],
      'path' => dirname($iconset->filename),
      'type' => 'iconset',
    );
  }

  // Get a list of enabled system components except icon sets.
  $result = db_query("SELECT filename, name, type, info FROM {system} WHERE type <> 'iconset' AND status = 1 ORDER BY weight DESC");

  // Fetch information about system components that provide icons.
  while ($component = db_fetch_object($result)) {
    $info = unserialize($component->info);
    if ($info['icons']) {
      $infos[$component->name] = $info;
      $iconsets[$component->name] = array(
        'name' => $info['name'],
        'description' => t('Icons provided by %name.', array('%name' => $info['name'])),
        'path' => dirname($component->filename),
        'type' => $component->type,
      );
    }
  }

  // Locate and add icon files for discovered icon sets.
  foreach ($iconsets as $key => $iconset){

    // Add paths to icon size folders.
    if (is_array($infos[$key]['sizes'])) {
      foreach ($infos[$key]['sizes'] as $size => $folder) {
        $size_folder = $iconset['path'] .'/'. $folder;
        if (is_dir($size_folder)) {
          $iconsets[$key]['sizes'][$size] = $size_folder;
        }
      }
    }

    // Add paths to all found icons in available sizes.
    if (is_array($infos[$key]['icons'])) {
      foreach ($infos[$key]['icons'] as $icon_name => $value) {

        // Icon has been declared with specific icon sizes, so look in the
        // specified path.
        if (is_array($value)) {
          foreach ($value as $size => $file) {
            if (file_exists($iconset['path'] .'/'. $file)) {
              $iconsets[$key]['icons'][$icon_name][$size] = $iconset['path'] .'/'. $file;
            }
          }
        }

        // Icon has no specific size or path specified, so look in all
        // declared size folders.
        elseif ($iconsets[$key]['sizes']) {
          foreach ($iconsets[$key]['sizes'] as $size => $size_folder) {
            if (file_exists($size_folder .'/'. $value)) {
              $iconsets[$key]['icons'][$icon_name][$size] = $size_folder .'/'. $value;
            }
          }
        }

      }
    }

  }

  return $iconsets;
}

/**
 * Find all standalone icon sets.
 *
 * @return
 *   An array of icon set files.
 */
function icon_find_iconsets() {
  // Find standalone icon sets' .info files.
  $iconsets = drupal_system_listing('\.info$', 'icons', 'name', 0);

  // Extract current files from database.
  system_get_files_database($iconsets, 'iconsets');

  // Set defaults for icon sets.
  $defaults = array(
    'name' => '',
    'description' => '',
    'screenshot' => 'screenshot.png',
  );

  db_query("DELETE FROM {system} WHERE type = 'iconset'");

  foreach ($iconsets as $key => $iconset) {
    // Read the .info file and merge it with defaults.
    $iconsets[$key]->info = drupal_parse_info_file($iconset->filename) + $defaults;

    db_query("INSERT INTO {system} (name, owner, info, type, filename, status, throttle, bootstrap) VALUES ('%s', '%s', '%s', '%s', '%s', %d, %d, %d)", $iconset->name, '', serialize($iconset->info), 'iconset', $iconset->filename, $iconset->status, 0, 0);
  }

  return $iconsets;
}

/**
 * Retrieves the status of an array of icon sets for a theme.
 *
 * @param $iconsets
 *   An array of icon sets to check.
 * @param $theme
 *   The theme to check for status against.
 */
function icon_get_iconsets_status(&$iconsets, $theme) {
  $result = db_query("SELECT iconset, status FROM {iconsets} WHERE theme = '%s'", $theme);
  while ($item = db_fetch_object($result)) {
    if ($iconsets[$item->iconset]) {
      $iconsets[$item->iconset]['status'] = $item->status;
    }
  }
}

/**
 * Collect an array of all icons available to the specified theme.
 *
 * @param $theme
 *   Name of the theme for which to get available icons.
 * @param $reset
 *   (optional) If TRUE, clear the cache and fetch the information from the
 *   database again.
 * @return
 *   An array of available icons for the specified theme.
 */
function icon_get_icons($theme, $reset = FALSE) {
  static $icons = array();

  if (!isset($icons[$theme]) || $reset) {
    if (!$reset && ($cache = cache_get('icon:'. $theme)) && !empty($cache->data)) {
      $icons[$theme] = $cache->data;
    }
    else {
      $iconsets = icon_get_iconsets();

      icon_get_iconsets_status($iconsets, $theme);

      foreach ($iconsets as $key => $iconset) {
        if (!$iconset['status'] || !$iconset['icons']) continue;
        foreach ($iconset['icons'] as $icon => $filename) {
          foreach ($iconset['sizes'] as $size) {
            if (file_exists($iconset['path'] .'/'. $size .'/'. $filename)) {
              $icons[$theme][$size][$icon] = $iconset['path'] .'/'. $size .'/'. $filename;
            }
          }
        }
      }
    }
  }

  return $icons[$theme];
}

/**
 * Array sorting callback; sorts icon sets by their importance.
 */
function _icon_sort_iconsets_by_importance($a, $b) {
  $levels = array('default' => 0, 'theme' => 1, 'module' => 2);
  if ($levels[$a['type']] > $levels[$b['type']]) {
    return 1;
  }
  else if ($levels[$a['type']] < $levels[$b['type']]) {
    return -1;
  }
  else {
    return _icon_sort_iconsets_by_name($a, $b);
  }
}

/**
 * Array sorting callback; sorts icon sets by their name.
 */
function _icon_sort_iconsets_by_name($a, $b) {
  return strcasecmp($a['name'], $b['name']);
}

/**
 * Theme function for displaying an icon.
 *
 * @param $name
 *   The name of the icon to display.
 * @param $size
 *   (optional) The desired size of the icon to display. If omitted, the
 *   default icon size for the theme will be used.
 * @return
 *   A string containing an image tag of the icon.
 */
function theme_icon($name, $size = '24x24') {
  // TODO: Get the default size for the theme. Fallback to sensible 24x24?
  global $icons;
  return theme('image', $icons[$size][$name]);
}

/**
 * Theme function for the icon sets overview form.
 *
 * @param $form
 *   An associative array containing the structure of the form.
 */
function theme_icon_iconsets_form($form) {
  foreach (element_children($form) as $key) {
    // Only look for icon sets.
    if (!isset($form[$key]['iconset'])) {
      continue;
    }

    $iconset = $form[$key]['iconset']['#value'];

    // Render the checkbox for enabling/disabling icon set.
    $status = drupal_render($form['status'][$key]);

    // Style icon set info.
    $info = '<div class="iconset-info"><h2>'. $iconset['name'] .'</h2><div class="description">'. $iconset['description'] .'</div></div>';

    // Build row.
    $row = array();
    $row[] = drupal_render($form[$key]['screenshot']);
    $row[] = $info;
    $row[] = array('data' => $status, 'align' => 'center');

    $rows[] = $row;
  }

  // Build the table and render the form.
  $header = array(t('Screenshot'), t('Name'), t('Enabled'));
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);

  return $output;
}

/**
 * Theme function for the icon selection form.
 *
 * @param $form
 *   An associative array containing the structure of the form.
 */
function theme_icon_icons_form($form) {
  $header = array('');
  $rows = array();

  if ($form['iconsets']['#value']) {
    // Add table headers.
    foreach ($form['iconsets']['#value'] as $key => $iconset) {
      $header[] = $iconset;
    }

    // Add radios for icons.
    foreach (element_children($form['icons']) as $icon) {
      $row = array('name' => $icon);
      foreach ($form['iconsets']['#value'] as $iconset) {
        $row[] = drupal_render($form['icons'][$icon][$iconset]);
      }
      $rows[] = $row;
    }

    unset($form['iconsets']);
  }
  else {
    $rows[] = array(t('No icons provided by selected icon sets, or no icon sets selected.'));
  }

  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);

  return $output;
}
